name: Hourly File Structure Logging

on:
  schedule:
    - cron: "0 */2 * * *"  # Runs every hour at the 0th minute
  workflow_dispatch:  # Allows manual triggering

jobs:
  generate_log:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Git User
        run: |
          git config --global user.name "SinghArindam"
          git config --global user.email "arindam0@hotmail.com"

      - name: Create logs folder
        run: mkdir -p logs

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install pytz for timezone handling
        run: pip install pytz

      - name: Generate and append log
        run: |
          python - <<'EOF'
          import json
          import os
          from datetime import datetime
          import subprocess
          import pytz # Import pytz

          # Define the IST timezone
          ist_timezone = pytz.timezone('Asia/Kolkata')

          # Get current UTC time and convert to IST
          ist_now = datetime.utcnow().astimezone(ist_timezone)

          # Format timestamp including IST offset (e.g., +05:30)
          timestamp_ist = ist_now.isoformat()

          # Get file structure
          result = subprocess.run(['ls', '-R'], capture_output=True, text=True)
          file_structure = result.stdout.strip().split('\n')

          # Prepare log entry
          log_entry = {
              'timestamp': timestamp_ist, # Using IST timestamp
              'file_structure': file_structure
          }

          log_file = 'logs/file_structure_log.json'

          # Initialize or read existing log file
          if os.path.exists(log_file):
              with open(log_file, 'r') as f:
                  try:
                      logs = json.load(f)
                      # Ensure logs is a list, even if the file only contains one entry
                      if not isinstance(logs, list):
                          logs = [logs]
                  except json.JSONDecodeError:
                      # Handle empty or invalid JSON file
                      logs = []
          else:
              logs = []

          # Append new entry
          logs.append(log_entry)

          # Write back to file
          with open(log_file, 'w') as f:
              json.dump(logs, f, indent=2)
          EOF

      - name: Commit and Push Changes
        run: |
          git add logs/
          # Only commit if there are changes
          git diff-index --quiet HEAD || git commit -m "Add hourly file structure log with IST timestamp"
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/SinghArindam/Kaggle.git
